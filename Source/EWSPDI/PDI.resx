<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HCNewYearsDay" xml:space="preserve">
    <value>New Year's Day</value>
  </data>
  <data name="HCMLKDay" xml:space="preserve">
    <value>Martin Luther King Day</value>
  </data>
  <data name="HCPresidentsDay" xml:space="preserve">
    <value>President's Day</value>
  </data>
  <data name="HCMemorialDay" xml:space="preserve">
    <value>Memorial Day</value>
  </data>
  <data name="HCIndependenceDay" xml:space="preserve">
    <value>Independence Day</value>
  </data>
  <data name="HCLaborDay" xml:space="preserve">
    <value>Labor Day</value>
  </data>
  <data name="HCVeteransDay" xml:space="preserve">
    <value>Veteran's Day</value>
  </data>
  <data name="HCThanksgiving" xml:space="preserve">
    <value>Thanksgiving Day</value>
  </data>
  <data name="HCDayAfterTG" xml:space="preserve">
    <value>Day After Thanksgiving</value>
  </data>
  <data name="HCChristmas" xml:space="preserve">
    <value>Christmas Day</value>
    <comment>HolidayCollection standard US holiday descriptions</comment>
  </data>
  <data name="DOFirst" xml:space="preserve">
    <value>First</value>
    <comment>DayOccurrence enum descriptions</comment>
  </data>
  <data name="DOSecond" xml:space="preserve">
    <value>Second</value>
  </data>
  <data name="DOThird" xml:space="preserve">
    <value>Third</value>
  </data>
  <data name="DOFourth" xml:space="preserve">
    <value>Fourth</value>
  </data>
  <data name="DOLast" xml:space="preserve">
    <value>Last</value>
  </data>
  <data name="DWWeekdays" xml:space="preserve">
    <value>Weekday</value>
  </data>
  <data name="DWWeekends" xml:space="preserve">
    <value>Weekend day</value>
  </data>
  <data name="DWEveryDay" xml:space="preserve">
    <value>Day</value>
    <comment>DaysOfWeek enum value combination descriptions</comment>
  </data>
  <data name="ExPeriodInvalidISOFormat" xml:space="preserve">
    <value>Invalid ISO 8601 period format.</value>
  </data>
  <data name="ExPeriodBadCompareObject" xml:space="preserve">
    <value>The object to compare must be a Period</value>
  </data>
  <data name="ExRDTYearOutOfRange" xml:space="preserve">
    <value>Year is out of the range of DateTime</value>
  </data>
  <data name="ExRDTBadMonth" xml:space="preserve">
    <value>Month should be between 0 and 11</value>
  </data>
  <data name="ExRDTBadDay" xml:space="preserve">
    <value>Day should be between 1 and 31</value>
  </data>
  <data name="ExRDTBadHour" xml:space="preserve">
    <value>Hour should be between 0 and 23</value>
  </data>
  <data name="ExRDTBadMinute" xml:space="preserve">
    <value>Minute should be between 0 and 59</value>
  </data>
  <data name="ExRDTBadSecond" xml:space="preserve">
    <value>Second should be between 0 and 59</value>
  </data>
  <data name="ExRDTInvalidDateTime" xml:space="preserve">
    <value>An invalid recurrence date has been encountered</value>
  </data>
  <data name="ExRDTBadCompareObject" xml:space="preserve">
    <value>The object to compare must be a RecurDateTime</value>
  </data>
  <data name="ExRecurNegativeCount" xml:space="preserve">
    <value>Maximum occurrences cannot be negative</value>
  </data>
  <data name="ExRecurBadInterval" xml:space="preserve">
    <value>Interval must be greater than zero</value>
  </data>
  <data name="ExRecurBadDOW" xml:space="preserve">
    <value>Invalid day of week specified</value>
  </data>
  <data name="ExRecurUnknownRuleFormat" xml:space="preserve">
    <value>Unknown recurrence rule format</value>
  </data>
  <data name="ExRecurBadBYDAYRule" xml:space="preserve">
    <value>Day values in BYDAY should be SU, MO, TU, WE, TH, FR, or SA</value>
  </data>
  <data name="ExRecurBadDayOfMonth" xml:space="preserve">
    <value>Day of the month should be between 1 and 31</value>
  </data>
  <data name="ExRecurBadMonth" xml:space="preserve">
    <value>Month should be between 1 and 12</value>
  </data>
  <data name="ExRecurInvalidDayForMonth" xml:space="preserve">
    <value>Day of the month should be valid for the month</value>
  </data>
  <data name="ExUICValueOutOfRange" xml:space="preserve">
    <value>Value is outside the range allowed for the collection</value>
  </data>
  <data name="ExUICZerosNotAllowed" xml:space="preserve">
    <value>Zeros are not allowed</value>
  </data>
  <data name="ExDUBadWeekNumber" xml:space="preserve">
    <value>Week value must be between 1 and 53</value>
  </data>
  <data name="ExDUBadJulianYear" xml:space="preserve">
    <value>Year value must be greater than or equal to 326 for the Julian calculation method</value>
  </data>
  <data name="ExDUBadOrthGregYear" xml:space="preserve">
    <value>Year value must be between 1583 and 4099 for the Orthodox and Gregorian calculation methods</value>
  </data>
  <data name="ExDUBadISOFormat" xml:space="preserve">
    <value>Invalid ISO 8601 date format</value>
  </data>
  <data name="ExDUBadISOTZFormat" xml:space="preserve">
    <value>Invalid ISO 8601 time zone format</value>
  </data>
  <data name="ExDurBadISOFormat" xml:space="preserve">
    <value>Invalid ISO 8601 duration format</value>
  </data>
  <data name="ExDurBadCompareObject" xml:space="preserve">
    <value>The object to compare must be a Duration</value>
  </data>
  <data name="ExDIBadInstanceValue" xml:space="preserve">
    <value>Instance value should be between -53 and 53</value>
    <comment>Exception messages</comment>
  </data>
  <data name="ExHolBadMonthValue" xml:space="preserve">
    <value>Month value must be between 1 and 12</value>
  </data>
  <data name="ExHolBadDayValueForMonth" xml:space="preserve">
    <value>Day value is not valid for the current month</value>
  </data>
  <data name="ExRecurBadWeekStart" xml:space="preserve">
    <value>WKST value should be SU, MO, TU, WE, TH, FR, or SA</value>
  </data>
  <data name="ExDIInvalidDayOfWeek" xml:space="preserve">
    <value>Invalid day of week specified</value>
  </data>
  <data name="DWNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="DurYear" xml:space="preserve">
    <value> year</value>
  </data>
  <data name="DurYears" xml:space="preserve">
    <value> years</value>
  </data>
  <data name="DurMonth" xml:space="preserve">
    <value> month</value>
  </data>
  <data name="DurMonths" xml:space="preserve">
    <value> months</value>
  </data>
  <data name="DurWeek" xml:space="preserve">
    <value> week</value>
  </data>
  <data name="DurWeeks" xml:space="preserve">
    <value> weeks</value>
  </data>
  <data name="DurDay" xml:space="preserve">
    <value> day</value>
    <comment>Duration part descriptions</comment>
  </data>
  <data name="DurDays" xml:space="preserve">
    <value> days</value>
  </data>
  <data name="DurHour" xml:space="preserve">
    <value> hour</value>
  </data>
  <data name="DurHours" xml:space="preserve">
    <value> hours</value>
  </data>
  <data name="DurMinute" xml:space="preserve">
    <value> minute</value>
  </data>
  <data name="DurMinutes" xml:space="preserve">
    <value> minutes</value>
  </data>
  <data name="DurSecond" xml:space="preserve">
    <value> second</value>
  </data>
  <data name="DurSeconds" xml:space="preserve">
    <value> seconds</value>
  </data>
  <data name="DurNegative" xml:space="preserve">
    <value>Negative</value>
  </data>
  <data name="DIFirst" xml:space="preserve">
    <value>st</value>
  </data>
  <data name="DISecond" xml:space="preserve">
    <value>nd</value>
  </data>
  <data name="DIThird" xml:space="preserve">
    <value>rd</value>
  </data>
  <data name="DINth" xml:space="preserve">
    <value>th</value>
  </data>
  <data name="DIAny" xml:space="preserve">
    <value>Any</value>
    <comment>DayInstance description strings</comment>
  </data>
  <data name="DIFromEnd" xml:space="preserve">
    <value>from end</value>
  </data>
  <data name="DONone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="ExDUOccurIsNone" xml:space="preserve">
    <value>DayOccurrence parameter cannot be None</value>
  </data>
  <data name="RDUndefined" xml:space="preserve">
    <value>The recurrence is undefined.</value>
  </data>
  <data name="RDSecondly" xml:space="preserve">
    <value>Recur every {0} second(s)</value>
  </data>
  <data name="RDMinutely" xml:space="preserve">
    <value>Recur every {0} minute(s)</value>
  </data>
  <data name="RDHourly" xml:space="preserve">
    <value>Recur every {0} hour(s)</value>
  </data>
  <data name="RDDaily" xml:space="preserve">
    <value>Recur every {0} day(s)</value>
  </data>
  <data name="RDEveryWeekday" xml:space="preserve">
    <value>Recur every weekday</value>
  </data>
  <data name="RDWeekly" xml:space="preserve">
    <value>Recur every {0} week(s)</value>
  </data>
  <data name="RDOn" xml:space="preserve">
    <value> on </value>
  </data>
  <data name="RDAnd" xml:space="preserve">
    <value> and </value>
    <comment>Recurrence part descriptions</comment>
  </data>
  <data name="RDForever" xml:space="preserve">
    <value> forever</value>
  </data>
  <data name="RDMaxOccur" xml:space="preserve">
    <value> for a maximum of {0} occurrences</value>
  </data>
  <data name="RDRecurUntil" xml:space="preserve">
    <value> until {0}</value>
  </data>
  <data name="RDNoHolidays" xml:space="preserve">
    <value>.  Instances cannot occur on a defined holiday.</value>
  </data>
  <data name="RDWeekStart" xml:space="preserve">
    <value>.  Weeks start on a {0}</value>
  </data>
  <data name="RDMonthlyDayX" xml:space="preserve">
    <value>Recur on day {0} of every {1} month(s)</value>
  </data>
  <data name="RDMonthlyDOW" xml:space="preserve">
    <value>Recur on the {0} {1} of every {2} month(s)</value>
  </data>
  <data name="RDYearlyDayX" xml:space="preserve">
    <value>Recur on {0} {1}{2} every {3} year(s)</value>
  </data>
  <data name="RDYearlyDOW" xml:space="preserve">
    <value>Recur on the {0} {1} in {2} every {3} year(s)</value>
  </data>
  <data name="RDMonthly" xml:space="preserve">
    <value>Recur every {0} month(s)</value>
  </data>
  <data name="RDYearly" xml:space="preserve">
    <value>Recur every {0} year(s)</value>
  </data>
  <data name="RDByMonth" xml:space="preserve">
    <value> the month(s) of </value>
  </data>
  <data name="RDByWeekNo" xml:space="preserve">
    <value> week(s) of the year</value>
  </data>
  <data name="RDByYearDay" xml:space="preserve">
    <value> day(s) of the year</value>
  </data>
  <data name="RDByMonthDay" xml:space="preserve">
    <value> day(s) of the month</value>
  </data>
  <data name="RDByDay" xml:space="preserve">
    <value> the day(s) of the week </value>
  </data>
  <data name="RDByHour" xml:space="preserve">
    <value> hour(s)</value>
  </data>
  <data name="RDByMinute" xml:space="preserve">
    <value> minute(s)</value>
  </data>
  <data name="RDBySecond" xml:space="preserve">
    <value> second(s)</value>
  </data>
  <data name="RDBySetPos" xml:space="preserve">
    <value> set position(s)</value>
  </data>
  <data name="RDLimitedTo" xml:space="preserve">
    <value>  Instances are limited to</value>
  </data>
  <data name="RDThe" xml:space="preserve">
    <value> the </value>
  </data>
</root>